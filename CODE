#Code in google colab
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist
from tensorflow.math import confusion_matrix

(x_train,y_train),(x_test , y_test) = mnist.load_data()
print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)
print(x_train[10])
print(x_train[10].shape)

# displaying the image

plt.imshow(x_train[25])
plt.show()

# print the corresponding label
print(y_train[25])

print(y_train.shape,y_test.shape)

# unique values in Y_train
print(np.unique(y_train))

# unique values in Y_test
print(np.unique(y_test))

# scaling the values

x_train = x_train/255
x_test = x_test/255


print(x_train[10])

# setting up the layers of the Neural  Network

model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(28,28)),
                          keras.layers.Dense(128, activation='relu'),
                          keras.layers.Dense(32, activation='relu'),
                          keras.layers.Dense(10, activation='softmax')
])

model.summary()

# compiling the Neural Network

model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=10,validation_split = 0.2)

loss, accuracy = model.evaluate(x_test, y_test)
print(accuracy)

print(x_test.shape)

# first data point in X_test
plt.imshow(x_test[0])
plt.show()

print(y_test[0])

y_pred = model.predict(x_test)

print(y_pred[0])

# converting the prediction probabilities to class label

label_for_first_test_image = np.argmax(y_pred[0])
print(label_for_first_test_image)

y_pred_labels = [np.argmax(i) for i in y_pred]
print(y_pred_labels)

conf_mat = confusion_matrix(y_test, y_pred_labels)

print(conf_mat)

plt.figure(figsize=(15,7))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

input_image_resize = cv2.resize(grayscale, (28, 28))

input_image_resize = input_image_resize/255

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)

input_pred_label = np.argmax(input_prediction)

print('The Handwritten Digit is recognised as ', input_pred_label)



































































































































































































